---
title: "toying with chromatographr"
format: html
editor: visual
bibliography: references.bib
---

# Toying with Chromatographr

```{r}
library(arrow)
df<-read_parquet("/Users/jonathan/mres_thesis/wine_analysis_hplc_uv/src/wine_analysis_hplc_uv/notebooks/processed_data.parquet")

df
```

Ok, file is read, now get Chromatographr going.. 2023-10-19 10:58:04 Chromatographr requires the raw binaries to load the data, cant load csv. This is annoying. So lets look at VPdtw directly..

```{r}
# from https://ethanbass.github.io/chromatographR/

library(chromatographR)
library(tidyverse)
library(VPdtw)
```

2023-10-19 11:14:04 VPdtw was developed in part by a research group at CSIRO including a Glen Stone who is now an adjunct professor at WSU in the Data Science School. Will need to reach out to him. Refering to @clifford2009, VPdtw relies only on the chromatographic information for warping, i.e. 2D so even though it was designed with. GC-MS in mind, it should be fine for HPLC-DAD. Also, Ethan Bass is the maintainer..

Ok, so now we need to get the data in a form suitable for VPdtw. It looks like they need to be vectors

```{r}
wide_data = df %>%
  select('mins','samplecode','wine','bcorr') %>%
  pivot_wider(id_cols='mins',names_from=c('samplecode'),values_from='bcorr')

wide_data
```

```{r}
r <- wide_data %>% select('176')
r
```

```{r}
q <- wide_data %>% select('torbreck-struie')
q
```

The output of the manipulations above is a `list` dtype, which appears to result in a `NULL` result when inputted into `VPdtw`. A `list` is subset of the `vector` datatype that can hold any data type\^\[<https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures.html>\].

```{r}
res <- VPdtw(
  reference=as.vector(unlist(r)),
  query=as.vector(unlist(q)),
  )
print(res)
plot(res)
```

The alignment is hugely better than anything we achieved with the base algorithm, peaks are barely mutated, alignment is top notch. But can it do better? The peak around 1000 (10 mins) is still not aligned to what is its obvious counterpart.

```{r}
res <- VPdtw(
  reference=as.vector(unlist(r)),
  query=as.vector(unlist(q)),
  maxshift=110
  )
print(res)
plot(res)
```

It can! However going any higher than 110 results in inappropriate shifting. In fact, I would leave it at 110. It is still questionable whether the alignment is correct, as, based on their profile, the last several peaks are misaligned by 1, moving right instead of left. That is because 'torbreck-struie' exhibits a slow down in eluence after the maxima peak at 10 minutes. Manual manipulation of this signal may enable it to be recovered however. This could be a useful tool after all. NOTE: the penalty term is a variable the same length as the reference. Perhaps you can define specific penalty terms for each region in the signal.

Now how about you reproduce the same for the full dataset.

```{r}
q_matrix <- wide_data %>% select(!mins) %>% as.matrix
head(q_matrix)
```

```{r}
# this is the one that is crashing
res_matrix <- VPdtw(
  reference=as.vector(unlist(r)),
  query=q_matrix,
  maxshift=100
  )
print(res_matrix)
plot(res_matrix)
```

Those results make me very happy. Now how about extraction?

```{r}
# the VPdtw instantiation returns a list of 8 elements, the fifth of which is the warpedQuery matrix/vector.

warpedQueries<-as_tibble(as.data.frame(res_matrix[5]))
head(warpedQueries)
```

```{r}
names = c('a','b','c','d')
# names(warped_df) <- names
 warpedQueries = warpedQueries %>% rename_with (~ names[seq_along(.)])
 head(warpedQueries)
```

Ok so that provides a basic functionality, but what about within a dpyler pipe as part of a pipeline?

```{r}
# a useful example df for testing
example_df <- data.frame(
  x1 = c(1, 2, 3),
  x2 = c(4, 5, 6),
  y1 = c(7, 8, 9),
  y2 = c(10, 11, 12)
)

```

```{r}

dtwmutate <- function(x){
  
  # print(head(r))
  
  # print(head(wq))
  # return(wq)
}
qm = wide_data %>% select(!c('mins')) %>% unlist %>% as.matrix
  
rv = wide_data %>% select('176') %>% unlist %>% as.vector

wq = VPdtw(reference=rv, query=qm, maxshift=150)

print(wq)
# b = dtwmutate(wide_data)
# wide_data %>%
#   mutate(across(!'176'), VPdtw)
# head(b)
```
